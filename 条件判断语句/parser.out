Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> print
Rule 6     statement -> if
Rule 7     statement -> while
Rule 8     statement -> for
Rule 9     statement -> BREAK
Rule 10    assignment -> VARIABLE = expr
Rule 11    assignment -> VARIABLE [ expr ] = expr
Rule 12    assignment -> VARIABLE PP
Rule 13    expr -> term
Rule 14    expr -> [ list ]
Rule 15    expr -> expr + term
Rule 16    expr -> expr - term
Rule 17    expr -> LEN ( VARIABLE )
Rule 18    list -> list , expr
Rule 19    list -> expr
Rule 20    term -> term * factor
Rule 21    term -> term / factor
Rule 22    term -> term MOD factor
Rule 23    term -> factor
Rule 24    factor -> NUMBER
Rule 25    factor -> VARIABLE
Rule 26    factor -> VARIABLE [ VARIABLE ]
Rule 27    factor -> VARIABLE [ NUMBER ]
Rule 28    factor -> ( expr )
Rule 29    elses -> ELIF ( condition ) { statements }
Rule 30    elses -> ELIF ( condition ) { statements } elses
Rule 31    elses -> ELSE { statements }
Rule 32    for -> FOR ( assignment ; condition ; assignment ) { statements }
Rule 33    content -> content , VARIABLE
Rule 34    content -> VARIABLE
Rule 35    print -> PRINT ( content )
Rule 36    if -> IF ( condition ) { statements }
Rule 37    if -> IF ( condition ) { statements } elses
Rule 38    condition -> expr > expr
Rule 39    condition -> expr < expr
Rule 40    condition -> expr LE expr
Rule 41    condition -> expr GE expr
Rule 42    while -> WHILE ( condition ) { statements }

Terminals, with rules where they appear

(                    : 17 28 29 30 32 35 36 37 42
)                    : 17 28 29 30 32 35 36 37 42
*                    : 20
+                    : 15
,                    : 18 33
-                    : 16
/                    : 21
;                    : 32 32
<                    : 39
=                    : 10 11
>                    : 38
BREAK                : 9
ELIF                 : 29 30
ELSE                 : 31
FOR                  : 32
GE                   : 41
IF                   : 36 37
LE                   : 40
LEN                  : 17
MOD                  : 22
NUMBER               : 24 27
PP                   : 12
PRINT                : 35
VARIABLE             : 10 11 12 17 25 26 26 27 33 34
WHILE                : 42
[                    : 11 14 26 27
]                    : 11 14 26 27
error                : 
{                    : 29 30 31 32 36 37 42
}                    : 29 30 31 32 36 37 42

Nonterminals, with rules where they appear

assignment           : 4 32 32
condition            : 29 30 32 36 37 42
content              : 33 35
elses                : 30 37
expr                 : 10 11 11 15 16 18 19 28 38 38 39 39 40 40 41 41
factor               : 20 21 22 23
for                  : 8
if                   : 6
list                 : 14 18
print                : 5
program              : 0
statement            : 2 3
statements           : 1 2 29 30 31 32 36 37 42
term                 : 13 15 16 20 21 22
while                : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    $end            reduce using rule 1 (program -> statements .)
    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statement                      shift and go to state 15
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 3

    (3) statements -> statement .

    BREAK           reduce using rule 3 (statements -> statement .)
    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment .

    BREAK           reduce using rule 4 (statement -> assignment .)
    VARIABLE        reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    }               reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> print .

    BREAK           reduce using rule 5 (statement -> print .)
    VARIABLE        reduce using rule 5 (statement -> print .)
    PRINT           reduce using rule 5 (statement -> print .)
    IF              reduce using rule 5 (statement -> print .)
    WHILE           reduce using rule 5 (statement -> print .)
    FOR             reduce using rule 5 (statement -> print .)
    $end            reduce using rule 5 (statement -> print .)
    }               reduce using rule 5 (statement -> print .)


state 6

    (6) statement -> if .

    BREAK           reduce using rule 6 (statement -> if .)
    VARIABLE        reduce using rule 6 (statement -> if .)
    PRINT           reduce using rule 6 (statement -> if .)
    IF              reduce using rule 6 (statement -> if .)
    WHILE           reduce using rule 6 (statement -> if .)
    FOR             reduce using rule 6 (statement -> if .)
    $end            reduce using rule 6 (statement -> if .)
    }               reduce using rule 6 (statement -> if .)


state 7

    (7) statement -> while .

    BREAK           reduce using rule 7 (statement -> while .)
    VARIABLE        reduce using rule 7 (statement -> while .)
    PRINT           reduce using rule 7 (statement -> while .)
    IF              reduce using rule 7 (statement -> while .)
    WHILE           reduce using rule 7 (statement -> while .)
    FOR             reduce using rule 7 (statement -> while .)
    $end            reduce using rule 7 (statement -> while .)
    }               reduce using rule 7 (statement -> while .)


state 8

    (8) statement -> for .

    BREAK           reduce using rule 8 (statement -> for .)
    VARIABLE        reduce using rule 8 (statement -> for .)
    PRINT           reduce using rule 8 (statement -> for .)
    IF              reduce using rule 8 (statement -> for .)
    WHILE           reduce using rule 8 (statement -> for .)
    FOR             reduce using rule 8 (statement -> for .)
    $end            reduce using rule 8 (statement -> for .)
    }               reduce using rule 8 (statement -> for .)


state 9

    (9) statement -> BREAK .

    BREAK           reduce using rule 9 (statement -> BREAK .)
    VARIABLE        reduce using rule 9 (statement -> BREAK .)
    PRINT           reduce using rule 9 (statement -> BREAK .)
    IF              reduce using rule 9 (statement -> BREAK .)
    WHILE           reduce using rule 9 (statement -> BREAK .)
    FOR             reduce using rule 9 (statement -> BREAK .)
    $end            reduce using rule 9 (statement -> BREAK .)
    }               reduce using rule 9 (statement -> BREAK .)


state 10

    (10) assignment -> VARIABLE . = expr
    (11) assignment -> VARIABLE . [ expr ] = expr
    (12) assignment -> VARIABLE . PP

    =               shift and go to state 16
    [               shift and go to state 17
    PP              shift and go to state 18


state 11

    (35) print -> PRINT . ( content )

    (               shift and go to state 19


state 12

    (36) if -> IF . ( condition ) { statements }
    (37) if -> IF . ( condition ) { statements } elses

    (               shift and go to state 20


state 13

    (42) while -> WHILE . ( condition ) { statements }

    (               shift and go to state 21


state 14

    (32) for -> FOR . ( assignment ; condition ; assignment ) { statements }

    (               shift and go to state 22


state 15

    (2) statements -> statements statement .

    BREAK           reduce using rule 2 (statements -> statements statement .)
    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 16

    (10) assignment -> VARIABLE = . expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    expr                           shift and go to state 24
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 17

    (11) assignment -> VARIABLE [ . expr ] = expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    expr                           shift and go to state 31
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 18

    (12) assignment -> VARIABLE PP .

    BREAK           reduce using rule 12 (assignment -> VARIABLE PP .)
    VARIABLE        reduce using rule 12 (assignment -> VARIABLE PP .)
    PRINT           reduce using rule 12 (assignment -> VARIABLE PP .)
    IF              reduce using rule 12 (assignment -> VARIABLE PP .)
    WHILE           reduce using rule 12 (assignment -> VARIABLE PP .)
    FOR             reduce using rule 12 (assignment -> VARIABLE PP .)
    $end            reduce using rule 12 (assignment -> VARIABLE PP .)
    ;               reduce using rule 12 (assignment -> VARIABLE PP .)
    }               reduce using rule 12 (assignment -> VARIABLE PP .)
    )               reduce using rule 12 (assignment -> VARIABLE PP .)


state 19

    (35) print -> PRINT ( . content )
    (33) content -> . content , VARIABLE
    (34) content -> . VARIABLE

    VARIABLE        shift and go to state 33

    content                        shift and go to state 32

state 20

    (36) if -> IF ( . condition ) { statements }
    (37) if -> IF ( . condition ) { statements } elses
    (38) condition -> . expr > expr
    (39) condition -> . expr < expr
    (40) condition -> . expr LE expr
    (41) condition -> . expr GE expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    condition                      shift and go to state 34
    expr                           shift and go to state 35
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 21

    (42) while -> WHILE ( . condition ) { statements }
    (38) condition -> . expr > expr
    (39) condition -> . expr < expr
    (40) condition -> . expr LE expr
    (41) condition -> . expr GE expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    condition                      shift and go to state 36
    expr                           shift and go to state 35
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 22

    (32) for -> FOR ( . assignment ; condition ; assignment ) { statements }
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP

    VARIABLE        shift and go to state 10

    assignment                     shift and go to state 37

state 23

    (25) factor -> VARIABLE .
    (26) factor -> VARIABLE . [ VARIABLE ]
    (27) factor -> VARIABLE . [ NUMBER ]

    *               reduce using rule 25 (factor -> VARIABLE .)
    /               reduce using rule 25 (factor -> VARIABLE .)
    MOD             reduce using rule 25 (factor -> VARIABLE .)
    +               reduce using rule 25 (factor -> VARIABLE .)
    -               reduce using rule 25 (factor -> VARIABLE .)
    BREAK           reduce using rule 25 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 25 (factor -> VARIABLE .)
    PRINT           reduce using rule 25 (factor -> VARIABLE .)
    IF              reduce using rule 25 (factor -> VARIABLE .)
    WHILE           reduce using rule 25 (factor -> VARIABLE .)
    FOR             reduce using rule 25 (factor -> VARIABLE .)
    $end            reduce using rule 25 (factor -> VARIABLE .)
    ;               reduce using rule 25 (factor -> VARIABLE .)
    }               reduce using rule 25 (factor -> VARIABLE .)
    )               reduce using rule 25 (factor -> VARIABLE .)
    ]               reduce using rule 25 (factor -> VARIABLE .)
    >               reduce using rule 25 (factor -> VARIABLE .)
    <               reduce using rule 25 (factor -> VARIABLE .)
    LE              reduce using rule 25 (factor -> VARIABLE .)
    GE              reduce using rule 25 (factor -> VARIABLE .)
    ,               reduce using rule 25 (factor -> VARIABLE .)
    [               shift and go to state 38


state 24

    (10) assignment -> VARIABLE = expr .
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    BREAK           reduce using rule 10 (assignment -> VARIABLE = expr .)
    VARIABLE        reduce using rule 10 (assignment -> VARIABLE = expr .)
    PRINT           reduce using rule 10 (assignment -> VARIABLE = expr .)
    IF              reduce using rule 10 (assignment -> VARIABLE = expr .)
    WHILE           reduce using rule 10 (assignment -> VARIABLE = expr .)
    FOR             reduce using rule 10 (assignment -> VARIABLE = expr .)
    $end            reduce using rule 10 (assignment -> VARIABLE = expr .)
    ;               reduce using rule 10 (assignment -> VARIABLE = expr .)
    }               reduce using rule 10 (assignment -> VARIABLE = expr .)
    )               reduce using rule 10 (assignment -> VARIABLE = expr .)
    +               shift and go to state 39
    -               shift and go to state 40


state 25

    (13) expr -> term .
    (20) term -> term . * factor
    (21) term -> term . / factor
    (22) term -> term . MOD factor

    +               reduce using rule 13 (expr -> term .)
    -               reduce using rule 13 (expr -> term .)
    BREAK           reduce using rule 13 (expr -> term .)
    VARIABLE        reduce using rule 13 (expr -> term .)
    PRINT           reduce using rule 13 (expr -> term .)
    IF              reduce using rule 13 (expr -> term .)
    WHILE           reduce using rule 13 (expr -> term .)
    FOR             reduce using rule 13 (expr -> term .)
    $end            reduce using rule 13 (expr -> term .)
    ;               reduce using rule 13 (expr -> term .)
    }               reduce using rule 13 (expr -> term .)
    )               reduce using rule 13 (expr -> term .)
    ]               reduce using rule 13 (expr -> term .)
    >               reduce using rule 13 (expr -> term .)
    <               reduce using rule 13 (expr -> term .)
    LE              reduce using rule 13 (expr -> term .)
    GE              reduce using rule 13 (expr -> term .)
    ,               reduce using rule 13 (expr -> term .)
    *               shift and go to state 41
    /               shift and go to state 42
    MOD             shift and go to state 43


state 26

    (14) expr -> [ . list ]
    (18) list -> . list , expr
    (19) list -> . expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    list                           shift and go to state 44
    expr                           shift and go to state 45
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 27

    (17) expr -> LEN . ( VARIABLE )

    (               shift and go to state 46


state 28

    (28) factor -> ( . expr )
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    expr                           shift and go to state 47
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 29

    (23) term -> factor .

    *               reduce using rule 23 (term -> factor .)
    /               reduce using rule 23 (term -> factor .)
    MOD             reduce using rule 23 (term -> factor .)
    +               reduce using rule 23 (term -> factor .)
    -               reduce using rule 23 (term -> factor .)
    BREAK           reduce using rule 23 (term -> factor .)
    VARIABLE        reduce using rule 23 (term -> factor .)
    PRINT           reduce using rule 23 (term -> factor .)
    IF              reduce using rule 23 (term -> factor .)
    WHILE           reduce using rule 23 (term -> factor .)
    FOR             reduce using rule 23 (term -> factor .)
    $end            reduce using rule 23 (term -> factor .)
    ;               reduce using rule 23 (term -> factor .)
    }               reduce using rule 23 (term -> factor .)
    )               reduce using rule 23 (term -> factor .)
    ]               reduce using rule 23 (term -> factor .)
    >               reduce using rule 23 (term -> factor .)
    <               reduce using rule 23 (term -> factor .)
    LE              reduce using rule 23 (term -> factor .)
    GE              reduce using rule 23 (term -> factor .)
    ,               reduce using rule 23 (term -> factor .)


state 30

    (24) factor -> NUMBER .

    *               reduce using rule 24 (factor -> NUMBER .)
    /               reduce using rule 24 (factor -> NUMBER .)
    MOD             reduce using rule 24 (factor -> NUMBER .)
    +               reduce using rule 24 (factor -> NUMBER .)
    -               reduce using rule 24 (factor -> NUMBER .)
    BREAK           reduce using rule 24 (factor -> NUMBER .)
    VARIABLE        reduce using rule 24 (factor -> NUMBER .)
    PRINT           reduce using rule 24 (factor -> NUMBER .)
    IF              reduce using rule 24 (factor -> NUMBER .)
    WHILE           reduce using rule 24 (factor -> NUMBER .)
    FOR             reduce using rule 24 (factor -> NUMBER .)
    $end            reduce using rule 24 (factor -> NUMBER .)
    ;               reduce using rule 24 (factor -> NUMBER .)
    }               reduce using rule 24 (factor -> NUMBER .)
    )               reduce using rule 24 (factor -> NUMBER .)
    ]               reduce using rule 24 (factor -> NUMBER .)
    >               reduce using rule 24 (factor -> NUMBER .)
    <               reduce using rule 24 (factor -> NUMBER .)
    LE              reduce using rule 24 (factor -> NUMBER .)
    GE              reduce using rule 24 (factor -> NUMBER .)
    ,               reduce using rule 24 (factor -> NUMBER .)


state 31

    (11) assignment -> VARIABLE [ expr . ] = expr
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    ]               shift and go to state 48
    +               shift and go to state 39
    -               shift and go to state 40


state 32

    (35) print -> PRINT ( content . )
    (33) content -> content . , VARIABLE

    )               shift and go to state 49
    ,               shift and go to state 50


state 33

    (34) content -> VARIABLE .

    )               reduce using rule 34 (content -> VARIABLE .)
    ,               reduce using rule 34 (content -> VARIABLE .)


state 34

    (36) if -> IF ( condition . ) { statements }
    (37) if -> IF ( condition . ) { statements } elses

    )               shift and go to state 51


state 35

    (38) condition -> expr . > expr
    (39) condition -> expr . < expr
    (40) condition -> expr . LE expr
    (41) condition -> expr . GE expr
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    >               shift and go to state 52
    <               shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55
    +               shift and go to state 39
    -               shift and go to state 40


state 36

    (42) while -> WHILE ( condition . ) { statements }

    )               shift and go to state 56


state 37

    (32) for -> FOR ( assignment . ; condition ; assignment ) { statements }

    ;               shift and go to state 57


state 38

    (26) factor -> VARIABLE [ . VARIABLE ]
    (27) factor -> VARIABLE [ . NUMBER ]

    VARIABLE        shift and go to state 58
    NUMBER          shift and go to state 59


state 39

    (15) expr -> expr + . term
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    term                           shift and go to state 60
    factor                         shift and go to state 29

state 40

    (16) expr -> expr - . term
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    term                           shift and go to state 61
    factor                         shift and go to state 29

state 41

    (20) term -> term * . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    factor                         shift and go to state 62

state 42

    (21) term -> term / . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    factor                         shift and go to state 63

state 43

    (22) term -> term MOD . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    factor                         shift and go to state 64

state 44

    (14) expr -> [ list . ]
    (18) list -> list . , expr

    ]               shift and go to state 65
    ,               shift and go to state 66


state 45

    (19) list -> expr .
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    ]               reduce using rule 19 (list -> expr .)
    ,               reduce using rule 19 (list -> expr .)
    +               shift and go to state 39
    -               shift and go to state 40


state 46

    (17) expr -> LEN ( . VARIABLE )

    VARIABLE        shift and go to state 67


state 47

    (28) factor -> ( expr . )
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    )               shift and go to state 68
    +               shift and go to state 39
    -               shift and go to state 40


state 48

    (11) assignment -> VARIABLE [ expr ] . = expr

    =               shift and go to state 69


state 49

    (35) print -> PRINT ( content ) .

    BREAK           reduce using rule 35 (print -> PRINT ( content ) .)
    VARIABLE        reduce using rule 35 (print -> PRINT ( content ) .)
    PRINT           reduce using rule 35 (print -> PRINT ( content ) .)
    IF              reduce using rule 35 (print -> PRINT ( content ) .)
    WHILE           reduce using rule 35 (print -> PRINT ( content ) .)
    FOR             reduce using rule 35 (print -> PRINT ( content ) .)
    $end            reduce using rule 35 (print -> PRINT ( content ) .)
    }               reduce using rule 35 (print -> PRINT ( content ) .)


state 50

    (33) content -> content , . VARIABLE

    VARIABLE        shift and go to state 70


state 51

    (36) if -> IF ( condition ) . { statements }
    (37) if -> IF ( condition ) . { statements } elses

    {               shift and go to state 71


state 52

    (38) condition -> expr > . expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    expr                           shift and go to state 72
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 53

    (39) condition -> expr < . expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    expr                           shift and go to state 73
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 54

    (40) condition -> expr LE . expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    expr                           shift and go to state 74
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 55

    (41) condition -> expr GE . expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    expr                           shift and go to state 75
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 56

    (42) while -> WHILE ( condition ) . { statements }

    {               shift and go to state 76


state 57

    (32) for -> FOR ( assignment ; . condition ; assignment ) { statements }
    (38) condition -> . expr > expr
    (39) condition -> . expr < expr
    (40) condition -> . expr LE expr
    (41) condition -> . expr GE expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    condition                      shift and go to state 77
    expr                           shift and go to state 35
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 58

    (26) factor -> VARIABLE [ VARIABLE . ]

    ]               shift and go to state 78


state 59

    (27) factor -> VARIABLE [ NUMBER . ]

    ]               shift and go to state 79


state 60

    (15) expr -> expr + term .
    (20) term -> term . * factor
    (21) term -> term . / factor
    (22) term -> term . MOD factor

    +               reduce using rule 15 (expr -> expr + term .)
    -               reduce using rule 15 (expr -> expr + term .)
    BREAK           reduce using rule 15 (expr -> expr + term .)
    VARIABLE        reduce using rule 15 (expr -> expr + term .)
    PRINT           reduce using rule 15 (expr -> expr + term .)
    IF              reduce using rule 15 (expr -> expr + term .)
    WHILE           reduce using rule 15 (expr -> expr + term .)
    FOR             reduce using rule 15 (expr -> expr + term .)
    $end            reduce using rule 15 (expr -> expr + term .)
    ;               reduce using rule 15 (expr -> expr + term .)
    }               reduce using rule 15 (expr -> expr + term .)
    )               reduce using rule 15 (expr -> expr + term .)
    ]               reduce using rule 15 (expr -> expr + term .)
    >               reduce using rule 15 (expr -> expr + term .)
    <               reduce using rule 15 (expr -> expr + term .)
    LE              reduce using rule 15 (expr -> expr + term .)
    GE              reduce using rule 15 (expr -> expr + term .)
    ,               reduce using rule 15 (expr -> expr + term .)
    *               shift and go to state 41
    /               shift and go to state 42
    MOD             shift and go to state 43


state 61

    (16) expr -> expr - term .
    (20) term -> term . * factor
    (21) term -> term . / factor
    (22) term -> term . MOD factor

    +               reduce using rule 16 (expr -> expr - term .)
    -               reduce using rule 16 (expr -> expr - term .)
    BREAK           reduce using rule 16 (expr -> expr - term .)
    VARIABLE        reduce using rule 16 (expr -> expr - term .)
    PRINT           reduce using rule 16 (expr -> expr - term .)
    IF              reduce using rule 16 (expr -> expr - term .)
    WHILE           reduce using rule 16 (expr -> expr - term .)
    FOR             reduce using rule 16 (expr -> expr - term .)
    $end            reduce using rule 16 (expr -> expr - term .)
    ;               reduce using rule 16 (expr -> expr - term .)
    }               reduce using rule 16 (expr -> expr - term .)
    )               reduce using rule 16 (expr -> expr - term .)
    ]               reduce using rule 16 (expr -> expr - term .)
    >               reduce using rule 16 (expr -> expr - term .)
    <               reduce using rule 16 (expr -> expr - term .)
    LE              reduce using rule 16 (expr -> expr - term .)
    GE              reduce using rule 16 (expr -> expr - term .)
    ,               reduce using rule 16 (expr -> expr - term .)
    *               shift and go to state 41
    /               shift and go to state 42
    MOD             shift and go to state 43


state 62

    (20) term -> term * factor .

    *               reduce using rule 20 (term -> term * factor .)
    /               reduce using rule 20 (term -> term * factor .)
    MOD             reduce using rule 20 (term -> term * factor .)
    +               reduce using rule 20 (term -> term * factor .)
    -               reduce using rule 20 (term -> term * factor .)
    BREAK           reduce using rule 20 (term -> term * factor .)
    VARIABLE        reduce using rule 20 (term -> term * factor .)
    PRINT           reduce using rule 20 (term -> term * factor .)
    IF              reduce using rule 20 (term -> term * factor .)
    WHILE           reduce using rule 20 (term -> term * factor .)
    FOR             reduce using rule 20 (term -> term * factor .)
    $end            reduce using rule 20 (term -> term * factor .)
    ;               reduce using rule 20 (term -> term * factor .)
    }               reduce using rule 20 (term -> term * factor .)
    )               reduce using rule 20 (term -> term * factor .)
    ]               reduce using rule 20 (term -> term * factor .)
    >               reduce using rule 20 (term -> term * factor .)
    <               reduce using rule 20 (term -> term * factor .)
    LE              reduce using rule 20 (term -> term * factor .)
    GE              reduce using rule 20 (term -> term * factor .)
    ,               reduce using rule 20 (term -> term * factor .)


state 63

    (21) term -> term / factor .

    *               reduce using rule 21 (term -> term / factor .)
    /               reduce using rule 21 (term -> term / factor .)
    MOD             reduce using rule 21 (term -> term / factor .)
    +               reduce using rule 21 (term -> term / factor .)
    -               reduce using rule 21 (term -> term / factor .)
    BREAK           reduce using rule 21 (term -> term / factor .)
    VARIABLE        reduce using rule 21 (term -> term / factor .)
    PRINT           reduce using rule 21 (term -> term / factor .)
    IF              reduce using rule 21 (term -> term / factor .)
    WHILE           reduce using rule 21 (term -> term / factor .)
    FOR             reduce using rule 21 (term -> term / factor .)
    $end            reduce using rule 21 (term -> term / factor .)
    ;               reduce using rule 21 (term -> term / factor .)
    }               reduce using rule 21 (term -> term / factor .)
    )               reduce using rule 21 (term -> term / factor .)
    ]               reduce using rule 21 (term -> term / factor .)
    >               reduce using rule 21 (term -> term / factor .)
    <               reduce using rule 21 (term -> term / factor .)
    LE              reduce using rule 21 (term -> term / factor .)
    GE              reduce using rule 21 (term -> term / factor .)
    ,               reduce using rule 21 (term -> term / factor .)


state 64

    (22) term -> term MOD factor .

    *               reduce using rule 22 (term -> term MOD factor .)
    /               reduce using rule 22 (term -> term MOD factor .)
    MOD             reduce using rule 22 (term -> term MOD factor .)
    +               reduce using rule 22 (term -> term MOD factor .)
    -               reduce using rule 22 (term -> term MOD factor .)
    BREAK           reduce using rule 22 (term -> term MOD factor .)
    VARIABLE        reduce using rule 22 (term -> term MOD factor .)
    PRINT           reduce using rule 22 (term -> term MOD factor .)
    IF              reduce using rule 22 (term -> term MOD factor .)
    WHILE           reduce using rule 22 (term -> term MOD factor .)
    FOR             reduce using rule 22 (term -> term MOD factor .)
    $end            reduce using rule 22 (term -> term MOD factor .)
    ;               reduce using rule 22 (term -> term MOD factor .)
    }               reduce using rule 22 (term -> term MOD factor .)
    )               reduce using rule 22 (term -> term MOD factor .)
    ]               reduce using rule 22 (term -> term MOD factor .)
    >               reduce using rule 22 (term -> term MOD factor .)
    <               reduce using rule 22 (term -> term MOD factor .)
    LE              reduce using rule 22 (term -> term MOD factor .)
    GE              reduce using rule 22 (term -> term MOD factor .)
    ,               reduce using rule 22 (term -> term MOD factor .)


state 65

    (14) expr -> [ list ] .

    +               reduce using rule 14 (expr -> [ list ] .)
    -               reduce using rule 14 (expr -> [ list ] .)
    BREAK           reduce using rule 14 (expr -> [ list ] .)
    VARIABLE        reduce using rule 14 (expr -> [ list ] .)
    PRINT           reduce using rule 14 (expr -> [ list ] .)
    IF              reduce using rule 14 (expr -> [ list ] .)
    WHILE           reduce using rule 14 (expr -> [ list ] .)
    FOR             reduce using rule 14 (expr -> [ list ] .)
    $end            reduce using rule 14 (expr -> [ list ] .)
    ;               reduce using rule 14 (expr -> [ list ] .)
    }               reduce using rule 14 (expr -> [ list ] .)
    )               reduce using rule 14 (expr -> [ list ] .)
    ]               reduce using rule 14 (expr -> [ list ] .)
    >               reduce using rule 14 (expr -> [ list ] .)
    <               reduce using rule 14 (expr -> [ list ] .)
    LE              reduce using rule 14 (expr -> [ list ] .)
    GE              reduce using rule 14 (expr -> [ list ] .)
    ,               reduce using rule 14 (expr -> [ list ] .)


state 66

    (18) list -> list , . expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    expr                           shift and go to state 80
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 67

    (17) expr -> LEN ( VARIABLE . )

    )               shift and go to state 81


state 68

    (28) factor -> ( expr ) .

    *               reduce using rule 28 (factor -> ( expr ) .)
    /               reduce using rule 28 (factor -> ( expr ) .)
    MOD             reduce using rule 28 (factor -> ( expr ) .)
    +               reduce using rule 28 (factor -> ( expr ) .)
    -               reduce using rule 28 (factor -> ( expr ) .)
    BREAK           reduce using rule 28 (factor -> ( expr ) .)
    VARIABLE        reduce using rule 28 (factor -> ( expr ) .)
    PRINT           reduce using rule 28 (factor -> ( expr ) .)
    IF              reduce using rule 28 (factor -> ( expr ) .)
    WHILE           reduce using rule 28 (factor -> ( expr ) .)
    FOR             reduce using rule 28 (factor -> ( expr ) .)
    $end            reduce using rule 28 (factor -> ( expr ) .)
    ;               reduce using rule 28 (factor -> ( expr ) .)
    }               reduce using rule 28 (factor -> ( expr ) .)
    )               reduce using rule 28 (factor -> ( expr ) .)
    ]               reduce using rule 28 (factor -> ( expr ) .)
    >               reduce using rule 28 (factor -> ( expr ) .)
    <               reduce using rule 28 (factor -> ( expr ) .)
    LE              reduce using rule 28 (factor -> ( expr ) .)
    GE              reduce using rule 28 (factor -> ( expr ) .)
    ,               reduce using rule 28 (factor -> ( expr ) .)


state 69

    (11) assignment -> VARIABLE [ expr ] = . expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    expr                           shift and go to state 82
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 70

    (33) content -> content , VARIABLE .

    )               reduce using rule 33 (content -> content , VARIABLE .)
    ,               reduce using rule 33 (content -> content , VARIABLE .)


state 71

    (36) if -> IF ( condition ) { . statements }
    (37) if -> IF ( condition ) { . statements } elses
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 83
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 72

    (38) condition -> expr > expr .
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    )               reduce using rule 38 (condition -> expr > expr .)
    ;               reduce using rule 38 (condition -> expr > expr .)
    +               shift and go to state 39
    -               shift and go to state 40


state 73

    (39) condition -> expr < expr .
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    )               reduce using rule 39 (condition -> expr < expr .)
    ;               reduce using rule 39 (condition -> expr < expr .)
    +               shift and go to state 39
    -               shift and go to state 40


state 74

    (40) condition -> expr LE expr .
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    )               reduce using rule 40 (condition -> expr LE expr .)
    ;               reduce using rule 40 (condition -> expr LE expr .)
    +               shift and go to state 39
    -               shift and go to state 40


state 75

    (41) condition -> expr GE expr .
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    )               reduce using rule 41 (condition -> expr GE expr .)
    ;               reduce using rule 41 (condition -> expr GE expr .)
    +               shift and go to state 39
    -               shift and go to state 40


state 76

    (42) while -> WHILE ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 84
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 77

    (32) for -> FOR ( assignment ; condition . ; assignment ) { statements }

    ;               shift and go to state 85


state 78

    (26) factor -> VARIABLE [ VARIABLE ] .

    *               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    /               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    MOD             reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    +               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    -               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    BREAK           reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    VARIABLE        reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    PRINT           reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    IF              reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    WHILE           reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    FOR             reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    $end            reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    ;               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    }               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    )               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    ]               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    >               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    <               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    LE              reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    GE              reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)
    ,               reduce using rule 26 (factor -> VARIABLE [ VARIABLE ] .)


state 79

    (27) factor -> VARIABLE [ NUMBER ] .

    *               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    /               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    MOD             reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    +               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    -               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    BREAK           reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    VARIABLE        reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    PRINT           reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    IF              reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    WHILE           reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    FOR             reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    $end            reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    ;               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    }               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    )               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    ]               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    >               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    <               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    LE              reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    GE              reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)
    ,               reduce using rule 27 (factor -> VARIABLE [ NUMBER ] .)


state 80

    (18) list -> list , expr .
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    ]               reduce using rule 18 (list -> list , expr .)
    ,               reduce using rule 18 (list -> list , expr .)
    +               shift and go to state 39
    -               shift and go to state 40


state 81

    (17) expr -> LEN ( VARIABLE ) .

    +               reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    -               reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    BREAK           reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    VARIABLE        reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    PRINT           reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    IF              reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    WHILE           reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    FOR             reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    $end            reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    ;               reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    }               reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    )               reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    ]               reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    >               reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    <               reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    LE              reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    GE              reduce using rule 17 (expr -> LEN ( VARIABLE ) .)
    ,               reduce using rule 17 (expr -> LEN ( VARIABLE ) .)


state 82

    (11) assignment -> VARIABLE [ expr ] = expr .
    (15) expr -> expr . + term
    (16) expr -> expr . - term

    BREAK           reduce using rule 11 (assignment -> VARIABLE [ expr ] = expr .)
    VARIABLE        reduce using rule 11 (assignment -> VARIABLE [ expr ] = expr .)
    PRINT           reduce using rule 11 (assignment -> VARIABLE [ expr ] = expr .)
    IF              reduce using rule 11 (assignment -> VARIABLE [ expr ] = expr .)
    WHILE           reduce using rule 11 (assignment -> VARIABLE [ expr ] = expr .)
    FOR             reduce using rule 11 (assignment -> VARIABLE [ expr ] = expr .)
    $end            reduce using rule 11 (assignment -> VARIABLE [ expr ] = expr .)
    ;               reduce using rule 11 (assignment -> VARIABLE [ expr ] = expr .)
    }               reduce using rule 11 (assignment -> VARIABLE [ expr ] = expr .)
    )               reduce using rule 11 (assignment -> VARIABLE [ expr ] = expr .)
    +               shift and go to state 39
    -               shift and go to state 40


state 83

    (36) if -> IF ( condition ) { statements . }
    (37) if -> IF ( condition ) { statements . } elses
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    }               shift and go to state 86
    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statement                      shift and go to state 15
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 84

    (42) while -> WHILE ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    }               shift and go to state 87
    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statement                      shift and go to state 15
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 85

    (32) for -> FOR ( assignment ; condition ; . assignment ) { statements }
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP

    VARIABLE        shift and go to state 10

    assignment                     shift and go to state 88

state 86

    (36) if -> IF ( condition ) { statements } .
    (37) if -> IF ( condition ) { statements } . elses
    (29) elses -> . ELIF ( condition ) { statements }
    (30) elses -> . ELIF ( condition ) { statements } elses
    (31) elses -> . ELSE { statements }

    BREAK           reduce using rule 36 (if -> IF ( condition ) { statements } .)
    VARIABLE        reduce using rule 36 (if -> IF ( condition ) { statements } .)
    PRINT           reduce using rule 36 (if -> IF ( condition ) { statements } .)
    IF              reduce using rule 36 (if -> IF ( condition ) { statements } .)
    WHILE           reduce using rule 36 (if -> IF ( condition ) { statements } .)
    FOR             reduce using rule 36 (if -> IF ( condition ) { statements } .)
    $end            reduce using rule 36 (if -> IF ( condition ) { statements } .)
    }               reduce using rule 36 (if -> IF ( condition ) { statements } .)
    ELIF            shift and go to state 90
    ELSE            shift and go to state 91

    elses                          shift and go to state 89

state 87

    (42) while -> WHILE ( condition ) { statements } .

    BREAK           reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    VARIABLE        reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    PRINT           reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    IF              reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    WHILE           reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    FOR             reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    $end            reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    }               reduce using rule 42 (while -> WHILE ( condition ) { statements } .)


state 88

    (32) for -> FOR ( assignment ; condition ; assignment . ) { statements }

    )               shift and go to state 92


state 89

    (37) if -> IF ( condition ) { statements } elses .

    BREAK           reduce using rule 37 (if -> IF ( condition ) { statements } elses .)
    VARIABLE        reduce using rule 37 (if -> IF ( condition ) { statements } elses .)
    PRINT           reduce using rule 37 (if -> IF ( condition ) { statements } elses .)
    IF              reduce using rule 37 (if -> IF ( condition ) { statements } elses .)
    WHILE           reduce using rule 37 (if -> IF ( condition ) { statements } elses .)
    FOR             reduce using rule 37 (if -> IF ( condition ) { statements } elses .)
    $end            reduce using rule 37 (if -> IF ( condition ) { statements } elses .)
    }               reduce using rule 37 (if -> IF ( condition ) { statements } elses .)


state 90

    (29) elses -> ELIF . ( condition ) { statements }
    (30) elses -> ELIF . ( condition ) { statements } elses

    (               shift and go to state 93


state 91

    (31) elses -> ELSE . { statements }

    {               shift and go to state 94


state 92

    (32) for -> FOR ( assignment ; condition ; assignment ) . { statements }

    {               shift and go to state 95


state 93

    (29) elses -> ELIF ( . condition ) { statements }
    (30) elses -> ELIF ( . condition ) { statements } elses
    (38) condition -> . expr > expr
    (39) condition -> . expr < expr
    (40) condition -> . expr LE expr
    (41) condition -> . expr GE expr
    (13) expr -> . term
    (14) expr -> . [ list ]
    (15) expr -> . expr + term
    (16) expr -> . expr - term
    (17) expr -> . LEN ( VARIABLE )
    (20) term -> . term * factor
    (21) term -> . term / factor
    (22) term -> . term MOD factor
    (23) term -> . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . VARIABLE [ VARIABLE ]
    (27) factor -> . VARIABLE [ NUMBER ]
    (28) factor -> . ( expr )

    [               shift and go to state 26
    LEN             shift and go to state 27
    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 23
    (               shift and go to state 28

    condition                      shift and go to state 96
    expr                           shift and go to state 35
    term                           shift and go to state 25
    factor                         shift and go to state 29

state 94

    (31) elses -> ELSE { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 97
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 95

    (32) for -> FOR ( assignment ; condition ; assignment ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    assignment                     shift and go to state 4
    statements                     shift and go to state 98
    statement                      shift and go to state 3
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 96

    (29) elses -> ELIF ( condition . ) { statements }
    (30) elses -> ELIF ( condition . ) { statements } elses

    )               shift and go to state 99


state 97

    (31) elses -> ELSE { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    }               shift and go to state 100
    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statement                      shift and go to state 15
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 98

    (32) for -> FOR ( assignment ; condition ; assignment ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    }               shift and go to state 101
    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    assignment                     shift and go to state 4
    statement                      shift and go to state 15
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 99

    (29) elses -> ELIF ( condition ) . { statements }
    (30) elses -> ELIF ( condition ) . { statements } elses

    {               shift and go to state 102


state 100

    (31) elses -> ELSE { statements } .

    BREAK           reduce using rule 31 (elses -> ELSE { statements } .)
    VARIABLE        reduce using rule 31 (elses -> ELSE { statements } .)
    PRINT           reduce using rule 31 (elses -> ELSE { statements } .)
    IF              reduce using rule 31 (elses -> ELSE { statements } .)
    WHILE           reduce using rule 31 (elses -> ELSE { statements } .)
    FOR             reduce using rule 31 (elses -> ELSE { statements } .)
    $end            reduce using rule 31 (elses -> ELSE { statements } .)
    }               reduce using rule 31 (elses -> ELSE { statements } .)


state 101

    (32) for -> FOR ( assignment ; condition ; assignment ) { statements } .

    BREAK           reduce using rule 32 (for -> FOR ( assignment ; condition ; assignment ) { statements } .)
    VARIABLE        reduce using rule 32 (for -> FOR ( assignment ; condition ; assignment ) { statements } .)
    PRINT           reduce using rule 32 (for -> FOR ( assignment ; condition ; assignment ) { statements } .)
    IF              reduce using rule 32 (for -> FOR ( assignment ; condition ; assignment ) { statements } .)
    WHILE           reduce using rule 32 (for -> FOR ( assignment ; condition ; assignment ) { statements } .)
    FOR             reduce using rule 32 (for -> FOR ( assignment ; condition ; assignment ) { statements } .)
    $end            reduce using rule 32 (for -> FOR ( assignment ; condition ; assignment ) { statements } .)
    }               reduce using rule 32 (for -> FOR ( assignment ; condition ; assignment ) { statements } .)


state 102

    (29) elses -> ELIF ( condition ) { . statements }
    (30) elses -> ELIF ( condition ) { . statements } elses
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 103
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 103

    (29) elses -> ELIF ( condition ) { statements . }
    (30) elses -> ELIF ( condition ) { statements . } elses
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . print
    (6) statement -> . if
    (7) statement -> . while
    (8) statement -> . for
    (9) statement -> . BREAK
    (10) assignment -> . VARIABLE = expr
    (11) assignment -> . VARIABLE [ expr ] = expr
    (12) assignment -> . VARIABLE PP
    (35) print -> . PRINT ( content )
    (36) if -> . IF ( condition ) { statements }
    (37) if -> . IF ( condition ) { statements } elses
    (42) while -> . WHILE ( condition ) { statements }
    (32) for -> . FOR ( assignment ; condition ; assignment ) { statements }

    }               shift and go to state 104
    BREAK           shift and go to state 9
    VARIABLE        shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statement                      shift and go to state 15
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8

state 104

    (29) elses -> ELIF ( condition ) { statements } .
    (30) elses -> ELIF ( condition ) { statements } . elses
    (29) elses -> . ELIF ( condition ) { statements }
    (30) elses -> . ELIF ( condition ) { statements } elses
    (31) elses -> . ELSE { statements }

    BREAK           reduce using rule 29 (elses -> ELIF ( condition ) { statements } .)
    VARIABLE        reduce using rule 29 (elses -> ELIF ( condition ) { statements } .)
    PRINT           reduce using rule 29 (elses -> ELIF ( condition ) { statements } .)
    IF              reduce using rule 29 (elses -> ELIF ( condition ) { statements } .)
    WHILE           reduce using rule 29 (elses -> ELIF ( condition ) { statements } .)
    FOR             reduce using rule 29 (elses -> ELIF ( condition ) { statements } .)
    $end            reduce using rule 29 (elses -> ELIF ( condition ) { statements } .)
    }               reduce using rule 29 (elses -> ELIF ( condition ) { statements } .)
    ELIF            shift and go to state 90
    ELSE            shift and go to state 91

    elses                          shift and go to state 105

state 105

    (30) elses -> ELIF ( condition ) { statements } elses .

    BREAK           reduce using rule 30 (elses -> ELIF ( condition ) { statements } elses .)
    VARIABLE        reduce using rule 30 (elses -> ELIF ( condition ) { statements } elses .)
    PRINT           reduce using rule 30 (elses -> ELIF ( condition ) { statements } elses .)
    IF              reduce using rule 30 (elses -> ELIF ( condition ) { statements } elses .)
    WHILE           reduce using rule 30 (elses -> ELIF ( condition ) { statements } elses .)
    FOR             reduce using rule 30 (elses -> ELIF ( condition ) { statements } elses .)
    $end            reduce using rule 30 (elses -> ELIF ( condition ) { statements } elses .)
    }               reduce using rule 30 (elses -> ELIF ( condition ) { statements } elses .)


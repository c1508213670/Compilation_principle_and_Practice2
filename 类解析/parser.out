Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LIST_VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     statement -> if
Rule 8     statement -> while
Rule 9     statement -> function
Rule 10    statement -> runfunction
Rule 11    statement -> return
Rule 12    statement -> class
Rule 13    statement -> classfunc0
Rule 14    statement -> classfunc1
Rule 15    statement -> classfunc2
Rule 16    return -> RETURN
Rule 17    assignment -> VARIABLE = NUMBER
Rule 18    assignment -> VARIABLE = VARIABLE
Rule 19    assignment -> VARIABLE = LIST
Rule 20    assignment -> VARIABLE = LEN ( VARIABLE )
Rule 21    class_assign -> SELFVAR = VARIABLE
Rule 22    class_operation -> SELFVAR = SELFVAR + VARIABLE
Rule 23    operation -> VARIABLE = VARIABLE + VARIABLE
Rule 24    operation -> VARIABLE = VARIABLE - VARIABLE
Rule 25    print -> PRINT ( VARIABLE , VARIABLE )
Rule 26    if -> IF ( condition ) { statements }
Rule 27    class -> CLASS VARIABLE { def_init def_add def_print }
Rule 28    def_init -> DEF init ( SELF , VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign class_assign }
Rule 29    def_add -> DEF add VARIABLE ( SELF , VARIABLE ) { class_operation }
Rule 30    def_print -> DEF defprint ( SELF ) { print }
Rule 31    classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER )
Rule 32    classfunc1 -> VARIABLE . add VARIABLE ( NUMBER )
Rule 33    classfunc2 -> VARIABLE . defprint ( )
Rule 34    function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
Rule 35    runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE )
Rule 36    condition -> VARIABLE < VARIABLE AND VARIABLE > VARIABLE
Rule 37    condition -> VARIABLE < VARIABLE AND VARIABLE < = VARIABLE
Rule 38    condition -> VARIABLE < = VARIABLE
Rule 39    condition -> VARIABLE > = VARIABLE
Rule 40    condition -> VARIABLE < VARIABLE
Rule 41    condition -> VARIABLE > VARIABLE
Rule 42    while -> WHILE ( condition ) { statements }

Terminals, with rules where they appear

(                    : 20 25 26 28 29 30 31 32 33 34 35 42
)                    : 20 25 26 28 29 30 31 32 33 34 35 42
+                    : 22 23
,                    : 25 28 28 28 29 31 31 34 34 35 35
-                    : 24
.                    : 32 33
<                    : 36 37 37 38 40
=                    : 17 18 19 20 21 22 23 24 31 37 38 39
>                    : 36 39 41
AND                  : 36 37
CLASS                : 27
DEF                  : 28 29 30 34
IF                   : 26
LEN                  : 20
LIST                 : 19
LIST_VAR             : 
NUMBER               : 17 31 31 32
PRINT                : 25
RETURN               : 16
SELF                 : 28 29 30
SELFVAR              : 21 22 22
VARIABLE             : 17 18 18 19 20 20 21 22 23 23 23 24 24 24 25 25 27 28 28 28 29 29 31 31 31 32 32 33 34 34 34 34 35 35 35 35 36 36 36 36 37 37 37 37 38 38 39 39 40 40 41 41
WHILE                : 42
add                  : 29 32
defprint             : 30 33
error                : 
init                 : 28
{                    : 26 27 28 29 30 34 42
}                    : 26 27 28 29 30 34 42

Nonterminals, with rules where they appear

assignment           : 4
class                : 12
class_assign         : 28 28 28
class_operation      : 29
classfunc0           : 13
classfunc1           : 14
classfunc2           : 15
condition            : 26 42
def_add              : 27
def_init             : 27
def_print            : 27
function             : 9
if                   : 7
operation            : 5
print                : 6 30
program              : 0
return               : 11
runfunction          : 10
statement            : 2 3
statements           : 1 2 26 34 42
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) statement -> . class
    (13) statement -> . classfunc0
    (14) statement -> . classfunc1
    (15) statement -> . classfunc2
    (17) assignment -> . VARIABLE = NUMBER
    (18) assignment -> . VARIABLE = VARIABLE
    (19) assignment -> . VARIABLE = LIST
    (20) assignment -> . VARIABLE = LEN ( VARIABLE )
    (23) operation -> . VARIABLE = VARIABLE + VARIABLE
    (24) operation -> . VARIABLE = VARIABLE - VARIABLE
    (25) print -> . PRINT ( VARIABLE , VARIABLE )
    (26) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (34) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (35) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , VARIABLE )
    (16) return -> . RETURN
    (27) class -> . CLASS VARIABLE { def_init def_add def_print }
    (31) classfunc0 -> . VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER )
    (32) classfunc1 -> . VARIABLE . add VARIABLE ( NUMBER )
    (33) classfunc2 -> . VARIABLE . defprint ( )

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20
    RETURN          shift and go to state 21
    CLASS           shift and go to state 22

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    classfunc0                     shift and go to state 13
    classfunc1                     shift and go to state 14
    classfunc2                     shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) statement -> . class
    (13) statement -> . classfunc0
    (14) statement -> . classfunc1
    (15) statement -> . classfunc2
    (17) assignment -> . VARIABLE = NUMBER
    (18) assignment -> . VARIABLE = VARIABLE
    (19) assignment -> . VARIABLE = LIST
    (20) assignment -> . VARIABLE = LEN ( VARIABLE )
    (23) operation -> . VARIABLE = VARIABLE + VARIABLE
    (24) operation -> . VARIABLE = VARIABLE - VARIABLE
    (25) print -> . PRINT ( VARIABLE , VARIABLE )
    (26) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (34) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (35) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , VARIABLE )
    (16) return -> . RETURN
    (27) class -> . CLASS VARIABLE { def_init def_add def_print }
    (31) classfunc0 -> . VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER )
    (32) classfunc1 -> . VARIABLE . add VARIABLE ( NUMBER )
    (33) classfunc2 -> . VARIABLE . defprint ( )

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20
    RETURN          shift and go to state 21
    CLASS           shift and go to state 22

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    classfunc0                     shift and go to state 13
    classfunc1                     shift and go to state 14
    classfunc2                     shift and go to state 15

state 3

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    DEF             reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    CLASS           reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment .

    VARIABLE        reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    DEF             reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    CLASS           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    }               reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> operation .

    VARIABLE        reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    IF              reduce using rule 5 (statement -> operation .)
    WHILE           reduce using rule 5 (statement -> operation .)
    DEF             reduce using rule 5 (statement -> operation .)
    RETURN          reduce using rule 5 (statement -> operation .)
    CLASS           reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)
    }               reduce using rule 5 (statement -> operation .)


state 6

    (6) statement -> print .

    VARIABLE        reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    IF              reduce using rule 6 (statement -> print .)
    WHILE           reduce using rule 6 (statement -> print .)
    DEF             reduce using rule 6 (statement -> print .)
    RETURN          reduce using rule 6 (statement -> print .)
    CLASS           reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)
    }               reduce using rule 6 (statement -> print .)


state 7

    (7) statement -> if .

    VARIABLE        reduce using rule 7 (statement -> if .)
    PRINT           reduce using rule 7 (statement -> if .)
    IF              reduce using rule 7 (statement -> if .)
    WHILE           reduce using rule 7 (statement -> if .)
    DEF             reduce using rule 7 (statement -> if .)
    RETURN          reduce using rule 7 (statement -> if .)
    CLASS           reduce using rule 7 (statement -> if .)
    $end            reduce using rule 7 (statement -> if .)
    }               reduce using rule 7 (statement -> if .)


state 8

    (8) statement -> while .

    VARIABLE        reduce using rule 8 (statement -> while .)
    PRINT           reduce using rule 8 (statement -> while .)
    IF              reduce using rule 8 (statement -> while .)
    WHILE           reduce using rule 8 (statement -> while .)
    DEF             reduce using rule 8 (statement -> while .)
    RETURN          reduce using rule 8 (statement -> while .)
    CLASS           reduce using rule 8 (statement -> while .)
    $end            reduce using rule 8 (statement -> while .)
    }               reduce using rule 8 (statement -> while .)


state 9

    (9) statement -> function .

    VARIABLE        reduce using rule 9 (statement -> function .)
    PRINT           reduce using rule 9 (statement -> function .)
    IF              reduce using rule 9 (statement -> function .)
    WHILE           reduce using rule 9 (statement -> function .)
    DEF             reduce using rule 9 (statement -> function .)
    RETURN          reduce using rule 9 (statement -> function .)
    CLASS           reduce using rule 9 (statement -> function .)
    $end            reduce using rule 9 (statement -> function .)
    }               reduce using rule 9 (statement -> function .)


state 10

    (10) statement -> runfunction .

    VARIABLE        reduce using rule 10 (statement -> runfunction .)
    PRINT           reduce using rule 10 (statement -> runfunction .)
    IF              reduce using rule 10 (statement -> runfunction .)
    WHILE           reduce using rule 10 (statement -> runfunction .)
    DEF             reduce using rule 10 (statement -> runfunction .)
    RETURN          reduce using rule 10 (statement -> runfunction .)
    CLASS           reduce using rule 10 (statement -> runfunction .)
    $end            reduce using rule 10 (statement -> runfunction .)
    }               reduce using rule 10 (statement -> runfunction .)


state 11

    (11) statement -> return .

    VARIABLE        reduce using rule 11 (statement -> return .)
    PRINT           reduce using rule 11 (statement -> return .)
    IF              reduce using rule 11 (statement -> return .)
    WHILE           reduce using rule 11 (statement -> return .)
    DEF             reduce using rule 11 (statement -> return .)
    RETURN          reduce using rule 11 (statement -> return .)
    CLASS           reduce using rule 11 (statement -> return .)
    $end            reduce using rule 11 (statement -> return .)
    }               reduce using rule 11 (statement -> return .)


state 12

    (12) statement -> class .

    VARIABLE        reduce using rule 12 (statement -> class .)
    PRINT           reduce using rule 12 (statement -> class .)
    IF              reduce using rule 12 (statement -> class .)
    WHILE           reduce using rule 12 (statement -> class .)
    DEF             reduce using rule 12 (statement -> class .)
    RETURN          reduce using rule 12 (statement -> class .)
    CLASS           reduce using rule 12 (statement -> class .)
    $end            reduce using rule 12 (statement -> class .)
    }               reduce using rule 12 (statement -> class .)


state 13

    (13) statement -> classfunc0 .

    VARIABLE        reduce using rule 13 (statement -> classfunc0 .)
    PRINT           reduce using rule 13 (statement -> classfunc0 .)
    IF              reduce using rule 13 (statement -> classfunc0 .)
    WHILE           reduce using rule 13 (statement -> classfunc0 .)
    DEF             reduce using rule 13 (statement -> classfunc0 .)
    RETURN          reduce using rule 13 (statement -> classfunc0 .)
    CLASS           reduce using rule 13 (statement -> classfunc0 .)
    $end            reduce using rule 13 (statement -> classfunc0 .)
    }               reduce using rule 13 (statement -> classfunc0 .)


state 14

    (14) statement -> classfunc1 .

    VARIABLE        reduce using rule 14 (statement -> classfunc1 .)
    PRINT           reduce using rule 14 (statement -> classfunc1 .)
    IF              reduce using rule 14 (statement -> classfunc1 .)
    WHILE           reduce using rule 14 (statement -> classfunc1 .)
    DEF             reduce using rule 14 (statement -> classfunc1 .)
    RETURN          reduce using rule 14 (statement -> classfunc1 .)
    CLASS           reduce using rule 14 (statement -> classfunc1 .)
    $end            reduce using rule 14 (statement -> classfunc1 .)
    }               reduce using rule 14 (statement -> classfunc1 .)


state 15

    (15) statement -> classfunc2 .

    VARIABLE        reduce using rule 15 (statement -> classfunc2 .)
    PRINT           reduce using rule 15 (statement -> classfunc2 .)
    IF              reduce using rule 15 (statement -> classfunc2 .)
    WHILE           reduce using rule 15 (statement -> classfunc2 .)
    DEF             reduce using rule 15 (statement -> classfunc2 .)
    RETURN          reduce using rule 15 (statement -> classfunc2 .)
    CLASS           reduce using rule 15 (statement -> classfunc2 .)
    $end            reduce using rule 15 (statement -> classfunc2 .)
    }               reduce using rule 15 (statement -> classfunc2 .)


state 16

    (17) assignment -> VARIABLE . = NUMBER
    (18) assignment -> VARIABLE . = VARIABLE
    (19) assignment -> VARIABLE . = LIST
    (20) assignment -> VARIABLE . = LEN ( VARIABLE )
    (23) operation -> VARIABLE . = VARIABLE + VARIABLE
    (24) operation -> VARIABLE . = VARIABLE - VARIABLE
    (35) runfunction -> VARIABLE . ( VARIABLE , VARIABLE , VARIABLE )
    (31) classfunc0 -> VARIABLE . = VARIABLE ( VARIABLE , NUMBER , NUMBER )
    (32) classfunc1 -> VARIABLE . . add VARIABLE ( NUMBER )
    (33) classfunc2 -> VARIABLE . . defprint ( )

    =               shift and go to state 24
    (               shift and go to state 25
    .               shift and go to state 26


state 17

    (25) print -> PRINT . ( VARIABLE , VARIABLE )

    (               shift and go to state 27


state 18

    (26) if -> IF . ( condition ) { statements }

    (               shift and go to state 28


state 19

    (42) while -> WHILE . ( condition ) { statements }

    (               shift and go to state 29


state 20

    (34) function -> DEF . VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }

    VARIABLE        shift and go to state 30


state 21

    (16) return -> RETURN .

    VARIABLE        reduce using rule 16 (return -> RETURN .)
    PRINT           reduce using rule 16 (return -> RETURN .)
    IF              reduce using rule 16 (return -> RETURN .)
    WHILE           reduce using rule 16 (return -> RETURN .)
    DEF             reduce using rule 16 (return -> RETURN .)
    RETURN          reduce using rule 16 (return -> RETURN .)
    CLASS           reduce using rule 16 (return -> RETURN .)
    $end            reduce using rule 16 (return -> RETURN .)
    }               reduce using rule 16 (return -> RETURN .)


state 22

    (27) class -> CLASS . VARIABLE { def_init def_add def_print }

    VARIABLE        shift and go to state 31


state 23

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    DEF             reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    CLASS           reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 24

    (17) assignment -> VARIABLE = . NUMBER
    (18) assignment -> VARIABLE = . VARIABLE
    (19) assignment -> VARIABLE = . LIST
    (20) assignment -> VARIABLE = . LEN ( VARIABLE )
    (23) operation -> VARIABLE = . VARIABLE + VARIABLE
    (24) operation -> VARIABLE = . VARIABLE - VARIABLE
    (31) classfunc0 -> VARIABLE = . VARIABLE ( VARIABLE , NUMBER , NUMBER )

    NUMBER          shift and go to state 33
    VARIABLE        shift and go to state 32
    LIST            shift and go to state 34
    LEN             shift and go to state 35


state 25

    (35) runfunction -> VARIABLE ( . VARIABLE , VARIABLE , VARIABLE )

    VARIABLE        shift and go to state 36


state 26

    (32) classfunc1 -> VARIABLE . . add VARIABLE ( NUMBER )
    (33) classfunc2 -> VARIABLE . . defprint ( )

    add             shift and go to state 37
    defprint        shift and go to state 38


state 27

    (25) print -> PRINT ( . VARIABLE , VARIABLE )

    VARIABLE        shift and go to state 39


state 28

    (26) if -> IF ( . condition ) { statements }
    (36) condition -> . VARIABLE < VARIABLE AND VARIABLE > VARIABLE
    (37) condition -> . VARIABLE < VARIABLE AND VARIABLE < = VARIABLE
    (38) condition -> . VARIABLE < = VARIABLE
    (39) condition -> . VARIABLE > = VARIABLE
    (40) condition -> . VARIABLE < VARIABLE
    (41) condition -> . VARIABLE > VARIABLE

    VARIABLE        shift and go to state 41

    condition                      shift and go to state 40

state 29

    (42) while -> WHILE ( . condition ) { statements }
    (36) condition -> . VARIABLE < VARIABLE AND VARIABLE > VARIABLE
    (37) condition -> . VARIABLE < VARIABLE AND VARIABLE < = VARIABLE
    (38) condition -> . VARIABLE < = VARIABLE
    (39) condition -> . VARIABLE > = VARIABLE
    (40) condition -> . VARIABLE < VARIABLE
    (41) condition -> . VARIABLE > VARIABLE

    VARIABLE        shift and go to state 41

    condition                      shift and go to state 42

state 30

    (34) function -> DEF VARIABLE . ( VARIABLE , VARIABLE , VARIABLE ) { statements }

    (               shift and go to state 43


state 31

    (27) class -> CLASS VARIABLE . { def_init def_add def_print }

    {               shift and go to state 44


state 32

    (18) assignment -> VARIABLE = VARIABLE .
    (23) operation -> VARIABLE = VARIABLE . + VARIABLE
    (24) operation -> VARIABLE = VARIABLE . - VARIABLE
    (31) classfunc0 -> VARIABLE = VARIABLE . ( VARIABLE , NUMBER , NUMBER )

    VARIABLE        reduce using rule 18 (assignment -> VARIABLE = VARIABLE .)
    PRINT           reduce using rule 18 (assignment -> VARIABLE = VARIABLE .)
    IF              reduce using rule 18 (assignment -> VARIABLE = VARIABLE .)
    WHILE           reduce using rule 18 (assignment -> VARIABLE = VARIABLE .)
    DEF             reduce using rule 18 (assignment -> VARIABLE = VARIABLE .)
    RETURN          reduce using rule 18 (assignment -> VARIABLE = VARIABLE .)
    CLASS           reduce using rule 18 (assignment -> VARIABLE = VARIABLE .)
    $end            reduce using rule 18 (assignment -> VARIABLE = VARIABLE .)
    }               reduce using rule 18 (assignment -> VARIABLE = VARIABLE .)
    +               shift and go to state 45
    -               shift and go to state 46
    (               shift and go to state 47


state 33

    (17) assignment -> VARIABLE = NUMBER .

    VARIABLE        reduce using rule 17 (assignment -> VARIABLE = NUMBER .)
    PRINT           reduce using rule 17 (assignment -> VARIABLE = NUMBER .)
    IF              reduce using rule 17 (assignment -> VARIABLE = NUMBER .)
    WHILE           reduce using rule 17 (assignment -> VARIABLE = NUMBER .)
    DEF             reduce using rule 17 (assignment -> VARIABLE = NUMBER .)
    RETURN          reduce using rule 17 (assignment -> VARIABLE = NUMBER .)
    CLASS           reduce using rule 17 (assignment -> VARIABLE = NUMBER .)
    $end            reduce using rule 17 (assignment -> VARIABLE = NUMBER .)
    }               reduce using rule 17 (assignment -> VARIABLE = NUMBER .)


state 34

    (19) assignment -> VARIABLE = LIST .

    VARIABLE        reduce using rule 19 (assignment -> VARIABLE = LIST .)
    PRINT           reduce using rule 19 (assignment -> VARIABLE = LIST .)
    IF              reduce using rule 19 (assignment -> VARIABLE = LIST .)
    WHILE           reduce using rule 19 (assignment -> VARIABLE = LIST .)
    DEF             reduce using rule 19 (assignment -> VARIABLE = LIST .)
    RETURN          reduce using rule 19 (assignment -> VARIABLE = LIST .)
    CLASS           reduce using rule 19 (assignment -> VARIABLE = LIST .)
    $end            reduce using rule 19 (assignment -> VARIABLE = LIST .)
    }               reduce using rule 19 (assignment -> VARIABLE = LIST .)


state 35

    (20) assignment -> VARIABLE = LEN . ( VARIABLE )

    (               shift and go to state 48


state 36

    (35) runfunction -> VARIABLE ( VARIABLE . , VARIABLE , VARIABLE )

    ,               shift and go to state 49


state 37

    (32) classfunc1 -> VARIABLE . add . VARIABLE ( NUMBER )

    VARIABLE        shift and go to state 50


state 38

    (33) classfunc2 -> VARIABLE . defprint . ( )

    (               shift and go to state 51


state 39

    (25) print -> PRINT ( VARIABLE . , VARIABLE )

    ,               shift and go to state 52


state 40

    (26) if -> IF ( condition . ) { statements }

    )               shift and go to state 53


state 41

    (36) condition -> VARIABLE . < VARIABLE AND VARIABLE > VARIABLE
    (37) condition -> VARIABLE . < VARIABLE AND VARIABLE < = VARIABLE
    (38) condition -> VARIABLE . < = VARIABLE
    (39) condition -> VARIABLE . > = VARIABLE
    (40) condition -> VARIABLE . < VARIABLE
    (41) condition -> VARIABLE . > VARIABLE

    <               shift and go to state 54
    >               shift and go to state 55


state 42

    (42) while -> WHILE ( condition . ) { statements }

    )               shift and go to state 56


state 43

    (34) function -> DEF VARIABLE ( . VARIABLE , VARIABLE , VARIABLE ) { statements }

    VARIABLE        shift and go to state 57


state 44

    (27) class -> CLASS VARIABLE { . def_init def_add def_print }
    (28) def_init -> . DEF init ( SELF , VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign class_assign }

    DEF             shift and go to state 59

    def_init                       shift and go to state 58

state 45

    (23) operation -> VARIABLE = VARIABLE + . VARIABLE

    VARIABLE        shift and go to state 60


state 46

    (24) operation -> VARIABLE = VARIABLE - . VARIABLE

    VARIABLE        shift and go to state 61


state 47

    (31) classfunc0 -> VARIABLE = VARIABLE ( . VARIABLE , NUMBER , NUMBER )

    VARIABLE        shift and go to state 62


state 48

    (20) assignment -> VARIABLE = LEN ( . VARIABLE )

    VARIABLE        shift and go to state 63


state 49

    (35) runfunction -> VARIABLE ( VARIABLE , . VARIABLE , VARIABLE )

    VARIABLE        shift and go to state 64


state 50

    (32) classfunc1 -> VARIABLE . add VARIABLE . ( NUMBER )

    (               shift and go to state 65


state 51

    (33) classfunc2 -> VARIABLE . defprint ( . )

    )               shift and go to state 66


state 52

    (25) print -> PRINT ( VARIABLE , . VARIABLE )

    VARIABLE        shift and go to state 67


state 53

    (26) if -> IF ( condition ) . { statements }

    {               shift and go to state 68


state 54

    (36) condition -> VARIABLE < . VARIABLE AND VARIABLE > VARIABLE
    (37) condition -> VARIABLE < . VARIABLE AND VARIABLE < = VARIABLE
    (38) condition -> VARIABLE < . = VARIABLE
    (40) condition -> VARIABLE < . VARIABLE

    VARIABLE        shift and go to state 69
    =               shift and go to state 70


state 55

    (39) condition -> VARIABLE > . = VARIABLE
    (41) condition -> VARIABLE > . VARIABLE

    =               shift and go to state 72
    VARIABLE        shift and go to state 71


state 56

    (42) while -> WHILE ( condition ) . { statements }

    {               shift and go to state 73


state 57

    (34) function -> DEF VARIABLE ( VARIABLE . , VARIABLE , VARIABLE ) { statements }

    ,               shift and go to state 74


state 58

    (27) class -> CLASS VARIABLE { def_init . def_add def_print }
    (29) def_add -> . DEF add VARIABLE ( SELF , VARIABLE ) { class_operation }

    DEF             shift and go to state 76

    def_add                        shift and go to state 75

state 59

    (28) def_init -> DEF . init ( SELF , VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign class_assign }

    init            shift and go to state 77


state 60

    (23) operation -> VARIABLE = VARIABLE + VARIABLE .

    VARIABLE        reduce using rule 23 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    PRINT           reduce using rule 23 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    IF              reduce using rule 23 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    WHILE           reduce using rule 23 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    DEF             reduce using rule 23 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    RETURN          reduce using rule 23 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    CLASS           reduce using rule 23 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    $end            reduce using rule 23 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    }               reduce using rule 23 (operation -> VARIABLE = VARIABLE + VARIABLE .)


state 61

    (24) operation -> VARIABLE = VARIABLE - VARIABLE .

    VARIABLE        reduce using rule 24 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    PRINT           reduce using rule 24 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    IF              reduce using rule 24 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    WHILE           reduce using rule 24 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    DEF             reduce using rule 24 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    RETURN          reduce using rule 24 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    CLASS           reduce using rule 24 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    $end            reduce using rule 24 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    }               reduce using rule 24 (operation -> VARIABLE = VARIABLE - VARIABLE .)


state 62

    (31) classfunc0 -> VARIABLE = VARIABLE ( VARIABLE . , NUMBER , NUMBER )

    ,               shift and go to state 78


state 63

    (20) assignment -> VARIABLE = LEN ( VARIABLE . )

    )               shift and go to state 79


state 64

    (35) runfunction -> VARIABLE ( VARIABLE , VARIABLE . , VARIABLE )

    ,               shift and go to state 80


state 65

    (32) classfunc1 -> VARIABLE . add VARIABLE ( . NUMBER )

    NUMBER          shift and go to state 81


state 66

    (33) classfunc2 -> VARIABLE . defprint ( ) .

    VARIABLE        reduce using rule 33 (classfunc2 -> VARIABLE . defprint ( ) .)
    PRINT           reduce using rule 33 (classfunc2 -> VARIABLE . defprint ( ) .)
    IF              reduce using rule 33 (classfunc2 -> VARIABLE . defprint ( ) .)
    WHILE           reduce using rule 33 (classfunc2 -> VARIABLE . defprint ( ) .)
    DEF             reduce using rule 33 (classfunc2 -> VARIABLE . defprint ( ) .)
    RETURN          reduce using rule 33 (classfunc2 -> VARIABLE . defprint ( ) .)
    CLASS           reduce using rule 33 (classfunc2 -> VARIABLE . defprint ( ) .)
    $end            reduce using rule 33 (classfunc2 -> VARIABLE . defprint ( ) .)
    }               reduce using rule 33 (classfunc2 -> VARIABLE . defprint ( ) .)


state 67

    (25) print -> PRINT ( VARIABLE , VARIABLE . )

    )               shift and go to state 82


state 68

    (26) if -> IF ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) statement -> . class
    (13) statement -> . classfunc0
    (14) statement -> . classfunc1
    (15) statement -> . classfunc2
    (17) assignment -> . VARIABLE = NUMBER
    (18) assignment -> . VARIABLE = VARIABLE
    (19) assignment -> . VARIABLE = LIST
    (20) assignment -> . VARIABLE = LEN ( VARIABLE )
    (23) operation -> . VARIABLE = VARIABLE + VARIABLE
    (24) operation -> . VARIABLE = VARIABLE - VARIABLE
    (25) print -> . PRINT ( VARIABLE , VARIABLE )
    (26) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (34) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (35) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , VARIABLE )
    (16) return -> . RETURN
    (27) class -> . CLASS VARIABLE { def_init def_add def_print }
    (31) classfunc0 -> . VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER )
    (32) classfunc1 -> . VARIABLE . add VARIABLE ( NUMBER )
    (33) classfunc2 -> . VARIABLE . defprint ( )

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20
    RETURN          shift and go to state 21
    CLASS           shift and go to state 22

    statements                     shift and go to state 83
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    classfunc0                     shift and go to state 13
    classfunc1                     shift and go to state 14
    classfunc2                     shift and go to state 15

state 69

    (36) condition -> VARIABLE < VARIABLE . AND VARIABLE > VARIABLE
    (37) condition -> VARIABLE < VARIABLE . AND VARIABLE < = VARIABLE
    (40) condition -> VARIABLE < VARIABLE .

    AND             shift and go to state 84
    )               reduce using rule 40 (condition -> VARIABLE < VARIABLE .)


state 70

    (38) condition -> VARIABLE < = . VARIABLE

    VARIABLE        shift and go to state 85


state 71

    (41) condition -> VARIABLE > VARIABLE .

    )               reduce using rule 41 (condition -> VARIABLE > VARIABLE .)


state 72

    (39) condition -> VARIABLE > = . VARIABLE

    VARIABLE        shift and go to state 86


state 73

    (42) while -> WHILE ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) statement -> . class
    (13) statement -> . classfunc0
    (14) statement -> . classfunc1
    (15) statement -> . classfunc2
    (17) assignment -> . VARIABLE = NUMBER
    (18) assignment -> . VARIABLE = VARIABLE
    (19) assignment -> . VARIABLE = LIST
    (20) assignment -> . VARIABLE = LEN ( VARIABLE )
    (23) operation -> . VARIABLE = VARIABLE + VARIABLE
    (24) operation -> . VARIABLE = VARIABLE - VARIABLE
    (25) print -> . PRINT ( VARIABLE , VARIABLE )
    (26) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (34) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (35) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , VARIABLE )
    (16) return -> . RETURN
    (27) class -> . CLASS VARIABLE { def_init def_add def_print }
    (31) classfunc0 -> . VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER )
    (32) classfunc1 -> . VARIABLE . add VARIABLE ( NUMBER )
    (33) classfunc2 -> . VARIABLE . defprint ( )

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20
    RETURN          shift and go to state 21
    CLASS           shift and go to state 22

    statements                     shift and go to state 87
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    classfunc0                     shift and go to state 13
    classfunc1                     shift and go to state 14
    classfunc2                     shift and go to state 15

state 74

    (34) function -> DEF VARIABLE ( VARIABLE , . VARIABLE , VARIABLE ) { statements }

    VARIABLE        shift and go to state 88


state 75

    (27) class -> CLASS VARIABLE { def_init def_add . def_print }
    (30) def_print -> . DEF defprint ( SELF ) { print }

    DEF             shift and go to state 90

    def_print                      shift and go to state 89

state 76

    (29) def_add -> DEF . add VARIABLE ( SELF , VARIABLE ) { class_operation }

    add             shift and go to state 91


state 77

    (28) def_init -> DEF init . ( SELF , VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign class_assign }

    (               shift and go to state 92


state 78

    (31) classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , . NUMBER , NUMBER )

    NUMBER          shift and go to state 93


state 79

    (20) assignment -> VARIABLE = LEN ( VARIABLE ) .

    VARIABLE        reduce using rule 20 (assignment -> VARIABLE = LEN ( VARIABLE ) .)
    PRINT           reduce using rule 20 (assignment -> VARIABLE = LEN ( VARIABLE ) .)
    IF              reduce using rule 20 (assignment -> VARIABLE = LEN ( VARIABLE ) .)
    WHILE           reduce using rule 20 (assignment -> VARIABLE = LEN ( VARIABLE ) .)
    DEF             reduce using rule 20 (assignment -> VARIABLE = LEN ( VARIABLE ) .)
    RETURN          reduce using rule 20 (assignment -> VARIABLE = LEN ( VARIABLE ) .)
    CLASS           reduce using rule 20 (assignment -> VARIABLE = LEN ( VARIABLE ) .)
    $end            reduce using rule 20 (assignment -> VARIABLE = LEN ( VARIABLE ) .)
    }               reduce using rule 20 (assignment -> VARIABLE = LEN ( VARIABLE ) .)


state 80

    (35) runfunction -> VARIABLE ( VARIABLE , VARIABLE , . VARIABLE )

    VARIABLE        shift and go to state 94


state 81

    (32) classfunc1 -> VARIABLE . add VARIABLE ( NUMBER . )

    )               shift and go to state 95


state 82

    (25) print -> PRINT ( VARIABLE , VARIABLE ) .

    VARIABLE        reduce using rule 25 (print -> PRINT ( VARIABLE , VARIABLE ) .)
    PRINT           reduce using rule 25 (print -> PRINT ( VARIABLE , VARIABLE ) .)
    IF              reduce using rule 25 (print -> PRINT ( VARIABLE , VARIABLE ) .)
    WHILE           reduce using rule 25 (print -> PRINT ( VARIABLE , VARIABLE ) .)
    DEF             reduce using rule 25 (print -> PRINT ( VARIABLE , VARIABLE ) .)
    RETURN          reduce using rule 25 (print -> PRINT ( VARIABLE , VARIABLE ) .)
    CLASS           reduce using rule 25 (print -> PRINT ( VARIABLE , VARIABLE ) .)
    $end            reduce using rule 25 (print -> PRINT ( VARIABLE , VARIABLE ) .)
    }               reduce using rule 25 (print -> PRINT ( VARIABLE , VARIABLE ) .)


state 83

    (26) if -> IF ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) statement -> . class
    (13) statement -> . classfunc0
    (14) statement -> . classfunc1
    (15) statement -> . classfunc2
    (17) assignment -> . VARIABLE = NUMBER
    (18) assignment -> . VARIABLE = VARIABLE
    (19) assignment -> . VARIABLE = LIST
    (20) assignment -> . VARIABLE = LEN ( VARIABLE )
    (23) operation -> . VARIABLE = VARIABLE + VARIABLE
    (24) operation -> . VARIABLE = VARIABLE - VARIABLE
    (25) print -> . PRINT ( VARIABLE , VARIABLE )
    (26) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (34) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (35) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , VARIABLE )
    (16) return -> . RETURN
    (27) class -> . CLASS VARIABLE { def_init def_add def_print }
    (31) classfunc0 -> . VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER )
    (32) classfunc1 -> . VARIABLE . add VARIABLE ( NUMBER )
    (33) classfunc2 -> . VARIABLE . defprint ( )

    }               shift and go to state 96
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20
    RETURN          shift and go to state 21
    CLASS           shift and go to state 22

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    classfunc0                     shift and go to state 13
    classfunc1                     shift and go to state 14
    classfunc2                     shift and go to state 15

state 84

    (36) condition -> VARIABLE < VARIABLE AND . VARIABLE > VARIABLE
    (37) condition -> VARIABLE < VARIABLE AND . VARIABLE < = VARIABLE

    VARIABLE        shift and go to state 97


state 85

    (38) condition -> VARIABLE < = VARIABLE .

    )               reduce using rule 38 (condition -> VARIABLE < = VARIABLE .)


state 86

    (39) condition -> VARIABLE > = VARIABLE .

    )               reduce using rule 39 (condition -> VARIABLE > = VARIABLE .)


state 87

    (42) while -> WHILE ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) statement -> . class
    (13) statement -> . classfunc0
    (14) statement -> . classfunc1
    (15) statement -> . classfunc2
    (17) assignment -> . VARIABLE = NUMBER
    (18) assignment -> . VARIABLE = VARIABLE
    (19) assignment -> . VARIABLE = LIST
    (20) assignment -> . VARIABLE = LEN ( VARIABLE )
    (23) operation -> . VARIABLE = VARIABLE + VARIABLE
    (24) operation -> . VARIABLE = VARIABLE - VARIABLE
    (25) print -> . PRINT ( VARIABLE , VARIABLE )
    (26) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (34) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (35) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , VARIABLE )
    (16) return -> . RETURN
    (27) class -> . CLASS VARIABLE { def_init def_add def_print }
    (31) classfunc0 -> . VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER )
    (32) classfunc1 -> . VARIABLE . add VARIABLE ( NUMBER )
    (33) classfunc2 -> . VARIABLE . defprint ( )

    }               shift and go to state 98
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20
    RETURN          shift and go to state 21
    CLASS           shift and go to state 22

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    classfunc0                     shift and go to state 13
    classfunc1                     shift and go to state 14
    classfunc2                     shift and go to state 15

state 88

    (34) function -> DEF VARIABLE ( VARIABLE , VARIABLE . , VARIABLE ) { statements }

    ,               shift and go to state 99


state 89

    (27) class -> CLASS VARIABLE { def_init def_add def_print . }

    }               shift and go to state 100


state 90

    (30) def_print -> DEF . defprint ( SELF ) { print }

    defprint        shift and go to state 101


state 91

    (29) def_add -> DEF add . VARIABLE ( SELF , VARIABLE ) { class_operation }

    VARIABLE        shift and go to state 102


state 92

    (28) def_init -> DEF init ( . SELF , VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign class_assign }

    SELF            shift and go to state 103


state 93

    (31) classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER . , NUMBER )

    ,               shift and go to state 104


state 94

    (35) runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE . )

    )               shift and go to state 105


state 95

    (32) classfunc1 -> VARIABLE . add VARIABLE ( NUMBER ) .

    VARIABLE        reduce using rule 32 (classfunc1 -> VARIABLE . add VARIABLE ( NUMBER ) .)
    PRINT           reduce using rule 32 (classfunc1 -> VARIABLE . add VARIABLE ( NUMBER ) .)
    IF              reduce using rule 32 (classfunc1 -> VARIABLE . add VARIABLE ( NUMBER ) .)
    WHILE           reduce using rule 32 (classfunc1 -> VARIABLE . add VARIABLE ( NUMBER ) .)
    DEF             reduce using rule 32 (classfunc1 -> VARIABLE . add VARIABLE ( NUMBER ) .)
    RETURN          reduce using rule 32 (classfunc1 -> VARIABLE . add VARIABLE ( NUMBER ) .)
    CLASS           reduce using rule 32 (classfunc1 -> VARIABLE . add VARIABLE ( NUMBER ) .)
    $end            reduce using rule 32 (classfunc1 -> VARIABLE . add VARIABLE ( NUMBER ) .)
    }               reduce using rule 32 (classfunc1 -> VARIABLE . add VARIABLE ( NUMBER ) .)


state 96

    (26) if -> IF ( condition ) { statements } .

    VARIABLE        reduce using rule 26 (if -> IF ( condition ) { statements } .)
    PRINT           reduce using rule 26 (if -> IF ( condition ) { statements } .)
    IF              reduce using rule 26 (if -> IF ( condition ) { statements } .)
    WHILE           reduce using rule 26 (if -> IF ( condition ) { statements } .)
    DEF             reduce using rule 26 (if -> IF ( condition ) { statements } .)
    RETURN          reduce using rule 26 (if -> IF ( condition ) { statements } .)
    CLASS           reduce using rule 26 (if -> IF ( condition ) { statements } .)
    $end            reduce using rule 26 (if -> IF ( condition ) { statements } .)
    }               reduce using rule 26 (if -> IF ( condition ) { statements } .)


state 97

    (36) condition -> VARIABLE < VARIABLE AND VARIABLE . > VARIABLE
    (37) condition -> VARIABLE < VARIABLE AND VARIABLE . < = VARIABLE

    >               shift and go to state 107
    <               shift and go to state 106


state 98

    (42) while -> WHILE ( condition ) { statements } .

    VARIABLE        reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    PRINT           reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    IF              reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    WHILE           reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    DEF             reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    RETURN          reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    CLASS           reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    $end            reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    }               reduce using rule 42 (while -> WHILE ( condition ) { statements } .)


state 99

    (34) function -> DEF VARIABLE ( VARIABLE , VARIABLE , . VARIABLE ) { statements }

    VARIABLE        shift and go to state 108


state 100

    (27) class -> CLASS VARIABLE { def_init def_add def_print } .

    VARIABLE        reduce using rule 27 (class -> CLASS VARIABLE { def_init def_add def_print } .)
    PRINT           reduce using rule 27 (class -> CLASS VARIABLE { def_init def_add def_print } .)
    IF              reduce using rule 27 (class -> CLASS VARIABLE { def_init def_add def_print } .)
    WHILE           reduce using rule 27 (class -> CLASS VARIABLE { def_init def_add def_print } .)
    DEF             reduce using rule 27 (class -> CLASS VARIABLE { def_init def_add def_print } .)
    RETURN          reduce using rule 27 (class -> CLASS VARIABLE { def_init def_add def_print } .)
    CLASS           reduce using rule 27 (class -> CLASS VARIABLE { def_init def_add def_print } .)
    $end            reduce using rule 27 (class -> CLASS VARIABLE { def_init def_add def_print } .)
    }               reduce using rule 27 (class -> CLASS VARIABLE { def_init def_add def_print } .)


state 101

    (30) def_print -> DEF defprint . ( SELF ) { print }

    (               shift and go to state 109


state 102

    (29) def_add -> DEF add VARIABLE . ( SELF , VARIABLE ) { class_operation }

    (               shift and go to state 110


state 103

    (28) def_init -> DEF init ( SELF . , VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign class_assign }

    ,               shift and go to state 111


state 104

    (31) classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , . NUMBER )

    NUMBER          shift and go to state 112


state 105

    (35) runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) .

    VARIABLE        reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) .)
    PRINT           reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) .)
    IF              reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) .)
    WHILE           reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) .)
    DEF             reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) .)
    RETURN          reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) .)
    CLASS           reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) .)
    $end            reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) .)
    }               reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) .)


state 106

    (37) condition -> VARIABLE < VARIABLE AND VARIABLE < . = VARIABLE

    =               shift and go to state 113


state 107

    (36) condition -> VARIABLE < VARIABLE AND VARIABLE > . VARIABLE

    VARIABLE        shift and go to state 114


state 108

    (34) function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE . ) { statements }

    )               shift and go to state 115


state 109

    (30) def_print -> DEF defprint ( . SELF ) { print }

    SELF            shift and go to state 116


state 110

    (29) def_add -> DEF add VARIABLE ( . SELF , VARIABLE ) { class_operation }

    SELF            shift and go to state 117


state 111

    (28) def_init -> DEF init ( SELF , . VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign class_assign }

    VARIABLE        shift and go to state 118


state 112

    (31) classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER . )

    )               shift and go to state 119


state 113

    (37) condition -> VARIABLE < VARIABLE AND VARIABLE < = . VARIABLE

    VARIABLE        shift and go to state 120


state 114

    (36) condition -> VARIABLE < VARIABLE AND VARIABLE > VARIABLE .

    )               reduce using rule 36 (condition -> VARIABLE < VARIABLE AND VARIABLE > VARIABLE .)


state 115

    (34) function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) . { statements }

    {               shift and go to state 121


state 116

    (30) def_print -> DEF defprint ( SELF . ) { print }

    )               shift and go to state 122


state 117

    (29) def_add -> DEF add VARIABLE ( SELF . , VARIABLE ) { class_operation }

    ,               shift and go to state 123


state 118

    (28) def_init -> DEF init ( SELF , VARIABLE . , VARIABLE , VARIABLE ) { class_assign class_assign class_assign }

    ,               shift and go to state 124


state 119

    (31) classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER ) .

    VARIABLE        reduce using rule 31 (classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER ) .)
    PRINT           reduce using rule 31 (classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER ) .)
    IF              reduce using rule 31 (classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER ) .)
    WHILE           reduce using rule 31 (classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER ) .)
    DEF             reduce using rule 31 (classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER ) .)
    RETURN          reduce using rule 31 (classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER ) .)
    CLASS           reduce using rule 31 (classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER ) .)
    $end            reduce using rule 31 (classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER ) .)
    }               reduce using rule 31 (classfunc0 -> VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER ) .)


state 120

    (37) condition -> VARIABLE < VARIABLE AND VARIABLE < = VARIABLE .

    )               reduce using rule 37 (condition -> VARIABLE < VARIABLE AND VARIABLE < = VARIABLE .)


state 121

    (34) function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) statement -> . class
    (13) statement -> . classfunc0
    (14) statement -> . classfunc1
    (15) statement -> . classfunc2
    (17) assignment -> . VARIABLE = NUMBER
    (18) assignment -> . VARIABLE = VARIABLE
    (19) assignment -> . VARIABLE = LIST
    (20) assignment -> . VARIABLE = LEN ( VARIABLE )
    (23) operation -> . VARIABLE = VARIABLE + VARIABLE
    (24) operation -> . VARIABLE = VARIABLE - VARIABLE
    (25) print -> . PRINT ( VARIABLE , VARIABLE )
    (26) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (34) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (35) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , VARIABLE )
    (16) return -> . RETURN
    (27) class -> . CLASS VARIABLE { def_init def_add def_print }
    (31) classfunc0 -> . VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER )
    (32) classfunc1 -> . VARIABLE . add VARIABLE ( NUMBER )
    (33) classfunc2 -> . VARIABLE . defprint ( )

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20
    RETURN          shift and go to state 21
    CLASS           shift and go to state 22

    statements                     shift and go to state 125
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    classfunc0                     shift and go to state 13
    classfunc1                     shift and go to state 14
    classfunc2                     shift and go to state 15

state 122

    (30) def_print -> DEF defprint ( SELF ) . { print }

    {               shift and go to state 126


state 123

    (29) def_add -> DEF add VARIABLE ( SELF , . VARIABLE ) { class_operation }

    VARIABLE        shift and go to state 127


state 124

    (28) def_init -> DEF init ( SELF , VARIABLE , . VARIABLE , VARIABLE ) { class_assign class_assign class_assign }

    VARIABLE        shift and go to state 128


state 125

    (34) function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) statement -> . class
    (13) statement -> . classfunc0
    (14) statement -> . classfunc1
    (15) statement -> . classfunc2
    (17) assignment -> . VARIABLE = NUMBER
    (18) assignment -> . VARIABLE = VARIABLE
    (19) assignment -> . VARIABLE = LIST
    (20) assignment -> . VARIABLE = LEN ( VARIABLE )
    (23) operation -> . VARIABLE = VARIABLE + VARIABLE
    (24) operation -> . VARIABLE = VARIABLE - VARIABLE
    (25) print -> . PRINT ( VARIABLE , VARIABLE )
    (26) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (34) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (35) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , VARIABLE )
    (16) return -> . RETURN
    (27) class -> . CLASS VARIABLE { def_init def_add def_print }
    (31) classfunc0 -> . VARIABLE = VARIABLE ( VARIABLE , NUMBER , NUMBER )
    (32) classfunc1 -> . VARIABLE . add VARIABLE ( NUMBER )
    (33) classfunc2 -> . VARIABLE . defprint ( )

    }               shift and go to state 129
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20
    RETURN          shift and go to state 21
    CLASS           shift and go to state 22

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    classfunc0                     shift and go to state 13
    classfunc1                     shift and go to state 14
    classfunc2                     shift and go to state 15

state 126

    (30) def_print -> DEF defprint ( SELF ) { . print }
    (25) print -> . PRINT ( VARIABLE , VARIABLE )

    PRINT           shift and go to state 17

    print                          shift and go to state 130

state 127

    (29) def_add -> DEF add VARIABLE ( SELF , VARIABLE . ) { class_operation }

    )               shift and go to state 131


state 128

    (28) def_init -> DEF init ( SELF , VARIABLE , VARIABLE . , VARIABLE ) { class_assign class_assign class_assign }

    ,               shift and go to state 132


state 129

    (34) function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .

    VARIABLE        reduce using rule 34 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    PRINT           reduce using rule 34 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    IF              reduce using rule 34 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    WHILE           reduce using rule 34 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    DEF             reduce using rule 34 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    RETURN          reduce using rule 34 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    CLASS           reduce using rule 34 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    $end            reduce using rule 34 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    }               reduce using rule 34 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)


state 130

    (30) def_print -> DEF defprint ( SELF ) { print . }

    }               shift and go to state 133


state 131

    (29) def_add -> DEF add VARIABLE ( SELF , VARIABLE ) . { class_operation }

    {               shift and go to state 134


state 132

    (28) def_init -> DEF init ( SELF , VARIABLE , VARIABLE , . VARIABLE ) { class_assign class_assign class_assign }

    VARIABLE        shift and go to state 135


state 133

    (30) def_print -> DEF defprint ( SELF ) { print } .

    }               reduce using rule 30 (def_print -> DEF defprint ( SELF ) { print } .)


state 134

    (29) def_add -> DEF add VARIABLE ( SELF , VARIABLE ) { . class_operation }
    (22) class_operation -> . SELFVAR = SELFVAR + VARIABLE

    SELFVAR         shift and go to state 137

    class_operation                shift and go to state 136

state 135

    (28) def_init -> DEF init ( SELF , VARIABLE , VARIABLE , VARIABLE . ) { class_assign class_assign class_assign }

    )               shift and go to state 138


state 136

    (29) def_add -> DEF add VARIABLE ( SELF , VARIABLE ) { class_operation . }

    }               shift and go to state 139


state 137

    (22) class_operation -> SELFVAR . = SELFVAR + VARIABLE

    =               shift and go to state 140


state 138

    (28) def_init -> DEF init ( SELF , VARIABLE , VARIABLE , VARIABLE ) . { class_assign class_assign class_assign }

    {               shift and go to state 141


state 139

    (29) def_add -> DEF add VARIABLE ( SELF , VARIABLE ) { class_operation } .

    DEF             reduce using rule 29 (def_add -> DEF add VARIABLE ( SELF , VARIABLE ) { class_operation } .)


state 140

    (22) class_operation -> SELFVAR = . SELFVAR + VARIABLE

    SELFVAR         shift and go to state 142


state 141

    (28) def_init -> DEF init ( SELF , VARIABLE , VARIABLE , VARIABLE ) { . class_assign class_assign class_assign }
    (21) class_assign -> . SELFVAR = VARIABLE

    SELFVAR         shift and go to state 144

    class_assign                   shift and go to state 143

state 142

    (22) class_operation -> SELFVAR = SELFVAR . + VARIABLE

    +               shift and go to state 145


state 143

    (28) def_init -> DEF init ( SELF , VARIABLE , VARIABLE , VARIABLE ) { class_assign . class_assign class_assign }
    (21) class_assign -> . SELFVAR = VARIABLE

    SELFVAR         shift and go to state 144

    class_assign                   shift and go to state 146

state 144

    (21) class_assign -> SELFVAR . = VARIABLE

    =               shift and go to state 147


state 145

    (22) class_operation -> SELFVAR = SELFVAR + . VARIABLE

    VARIABLE        shift and go to state 148


state 146

    (28) def_init -> DEF init ( SELF , VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign . class_assign }
    (21) class_assign -> . SELFVAR = VARIABLE

    SELFVAR         shift and go to state 144

    class_assign                   shift and go to state 149

state 147

    (21) class_assign -> SELFVAR = . VARIABLE

    VARIABLE        shift and go to state 150


state 148

    (22) class_operation -> SELFVAR = SELFVAR + VARIABLE .

    }               reduce using rule 22 (class_operation -> SELFVAR = SELFVAR + VARIABLE .)


state 149

    (28) def_init -> DEF init ( SELF , VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign class_assign . }

    }               shift and go to state 151


state 150

    (21) class_assign -> SELFVAR = VARIABLE .

    SELFVAR         reduce using rule 21 (class_assign -> SELFVAR = VARIABLE .)
    }               reduce using rule 21 (class_assign -> SELFVAR = VARIABLE .)


state 151

    (28) def_init -> DEF init ( SELF , VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign class_assign } .

    DEF             reduce using rule 28 (def_init -> DEF init ( SELF , VARIABLE , VARIABLE , VARIABLE ) { class_assign class_assign class_assign } .)

